// Importing createSlice function from Redux Toolkit
import { createSlice } from "@reduxjs/toolkit";
import { homeMiddleWare, countMiddleWare } from "./homeMiddleware";
// Initial state for the homeReducer slice of state
const initialState = {
  loading: false, // Boolean to indicate whether data is loading
  error: "", // String to store any potential error messages
  homeData: [{ name: "yuva", age: 24, job: "Software Developer" }], // Array of home data objects
  count: 0,
};

// Creating a slice of state using createSlice function
const homeReducer = createSlice({
  // Name for the slice of state, used for action types and selectors
  name: "homeReducer",
  // Initial state for the slice
  initialState,
  // Reducer functions for handling actions (none provided in this case)
  reducers: {},
  // Extra reducers for handling actions dispatched elsewhere (none provided in this case)
  // Placeholder for handling extra reducers
  extraReducers: (builder) => {
    builder.addCase(homeMiddleWare.pending, (state) => {
      state.loading = true;
    });
    builder.addCase(homeMiddleWare.fulfilled, (state, action) => {
      state.homeData = action.payload;
    });
    builder.addCase(homeMiddleWare.rejected, (state, action) => {
      state.loading = false;
      state.error = typeof action.payload === "string" ? action.payload : "";
    });
    builder.addCase(countMiddleWare.pending, (state) => {
      state.loading = true;
    });
    builder.addCase(countMiddleWare.fulfilled, (state, action) => {
      console.log(action.payload, "fin in red");
      state.count = ++state.count;
    });
    builder.addCase(countMiddleWare.rejected, (state, action) => {
      state.loading = false;
      state.error = typeof action.payload === "string" ? action.payload : "";
    });
  },
});

// Exporting the reducer function generated by createSlice
export default homeReducer.reducer;
